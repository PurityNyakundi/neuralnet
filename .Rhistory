dataset = read.table("NN3D_data.csv", sep =",", header = TRUE)
dataset = read.table("NN3D_data.csv", sep =",", header = TRUE)
m <- length(unique(dataset$x))
n <- length(unique(dataset$y))
nz <- matrix(dataset$z, nrow=m, ncol=n, byrow = FALSE)
persp(unique(dataset$x),unique(dataset$x),nz,theta=30, phi=30, expand=0.5,col="lightblue", zlab="z=f(x,y)", xlab = "x", ylab = "y", ticktype="detailed", shade=.75, lphi=45, ltheta=135)
m
nz
n <- length(unique(dataset$y))
n
m <- length(unique(dataset$x))
head(dataset)
dim(dataset)
str(dataset)
library(ggplot2)
library(ggplot2)
library(GGally)
library(psych)
hist(
dataset$x,
main = "check X distribution",
xlab = "X",
col = "Blue"
)
hist(
dataset$y,
main = "check X distribution",
xlab = "X",
col = "Blue"
)
hist(
dataset$y,
main = "check X distribution",
xlab = "Y",
col = "Red"
)
colSums(is.na(dataset))
#check for outliers
boxplot(dataset$x)
boxplot(dataset$y)
boxplot(dataset$z)
# install package
install.packages("neuralnet")
install.packages("neuralnet")
#split train and test data
library(caret)
index <-createDataPartition(dataset$z,p = 0.8,list = F)
train_data<-dataset[index,]
test_data<-dataset[-index,]
duplicated(dataset)
anyduplicated(dataset)
#All is well
library(tidyverse)
anyduplicated(dataset)
anyDuplicated(dataset)
# fit neural network
nn=neuralnet(z~.,data=train_data, hidden=3,act.fct = "logistic",
linear.output = FALSE)
require(neuralnet)
# fit neural network
nn=neuralnet(z~.,data=train_data, hidden=3,act.fct = "logistic",
linear.output = FALSE)
nn
summary(nn)
plot(nn)
Predict=compute(nn,test_data)
Predict$net.result
# fit neural network
scaleddata<-scale(dataset)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(dataset, normalize))
index <-createDataPartition(dataset$z,p = 0.8,list = F)
train_data<-dataset[index,]
test_data<-dataset[-index,]
nn <- neuralnet(z~., data=train_data, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn$result.matrix
nn$result.matrix
plot(nn)
#Neural Network
head(maxmindf)
trainNN = maxmindf[index , ]
testNN = maxmindf[-index , ]
set.seed(2)
NN = neuralnet(z~., trainNN, hidden = 3 , linear.output = T )
# plot neural network
plot(NN)
NN = neuralnet(z~., trainNN, hidden = 3 , linear.output = T )
# plot neural network
plot(NN)
NN <-neuralnet(z~., trainNN, hidden = 3 , linear.output = T )
NN <-neuralnet(z~., trainNN, hidden = 3 , linear.output = T )
NN <-neuralnet(z~x, trainNN, hidden = 3 , linear.output = T )
# plot neural network
plot(NN)
predict_testNN = compute(NN, testNN)
predict_testNN = (predict_testNN$net.result * (max(dataset$z) - min(dataset$z))) + min(dataset$z)
plot(datatest$z, predict_testNN, col='blue', pch=16, ylab = "predicted z NN", xlab = "real z")
plot(dataset$z, predict_testNN, col='blue', pch=16, ylab = "predicted z NN", xlab = "real z")
abline(0,1)
# Calculate Root Mean Square Error (RMSE)
RMSE.NN = (sum((datatest$z - predict_testNN)^2) / nrow(datatest)) ^ 0.5
NN <-neuralnet(z~., trainNN, hidden = 3 , linear.output = T )
# plot neural network
plot(NN)
predict_testNN = compute(NN, testNN)
predict_testNN = (predict_testNN$net.result * (max(dataset$z) - min(dataset$z))) + min(dataset$z)
plot(dataset$z, predict_testNN, col='blue', pch=16, ylab = "predicted z NN", xlab = "real z")
abline(0,1)
# Calculate Root Mean Square Error (RMSE)
RMSE.NN = (sum((datasett$z - predict_testNN)^2) / nrow(dataset)) ^ 0.5
index <-createDataPartition(dataset$z,p = 0.8,list = F)
train_data<-dataset[index,]
test_data<-dataset[-index,]
require(neuralnet)
# fit neural network
scaleddata<-scale(dataset)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(dataset, normalize))
#Neural Network
head(maxmindf)
trainNN = maxmindf[index , ]
testNN = maxmindf[-index , ]
set.seed(2)
NN <-neuralnet(z~., trainNN, hidden = 3 , linear.output = T )
# plot neural network
plot(NN)
predict_testNN = compute(NN, testNN)
predict_testNN = (predict_testNN$net.result * (max(dataset$z) - min(dataset$z))) + min(dataset$z)
plot(test_data$z, predict_testNN, col='blue', pch=16, ylab = "predicted z NN", xlab = "real z")
abline(0,1)
# Calculate Root Mean Square Error (RMSE)
RMSE.NN = (sum((test_data$z - predict_testNN)^2) / nrow(test_data)) ^ 0.5
RMSE.NN
head(predict_testNN)
head(z)
head(dataset$z)
NN <-neuralnet(z~., trainNN, hidden = 4 , linear.output = T )
dataset = read.table("NN3D_data.csv", sep =",", header = TRUE)
m <- length(unique(dataset$x))
n <- length(unique(dataset$y))
nz <- matrix(dataset$z, nrow=m, ncol=n, byrow = FALSE)
persp(unique(dataset$x),unique(dataset$x),nz,theta=30, phi=30, expand=0.5,col="lightblue", zlab="z=f(x,y)", xlab = "x", ylab = "y", ticktype="detailed", shade=.75, lphi=45, ltheta=135)
m
nz
n
head(dataset)
dim(dataset)
str(dataset)
library(ggplot2)
library(GGally)
library(psych)
hist(
dataset$x,
main = "check X distribution",
xlab = "X",
col = "Blue"
)
hist(
dataset$y,
main = "check Y distribution",
xlab = "Y",
col = "Red"
)
#All is well
library(tidyverse)
colSums(is.na(dataset))
#check for outliers
boxplot(dataset$x)
boxplot(dataset$y)
boxplot(dataset$z)
anyDuplicated(dataset)
#there are no duplicates
# install package
install.packages("neuralnet")
#split train and test data
library(caret)
index <-createDataPartition(dataset$z,p = 0.8,list = F)
train_data<-dataset[index,]
test_data<-dataset[-index,]
require(neuralnet)
# fit neural network
scaleddata<-scale(dataset)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(dataset, normalize))
#Neural Network
head(maxmindf)
trainNN = maxmindf[index , ]
testNN = maxmindf[-index , ]
set.seed(2)
NN <-neuralnet(z~., trainNN, hidden = 4 , linear.output = T )
# plot neural network
plot(NN)
predict_testNN = compute(NN, testNN)
predict_testNN = (predict_testNN$net.result * (max(dataset$z) - min(dataset$z))) + min(dataset$z)
plot(test_data$z, predict_testNN, col='blue', pch=16, ylab = "predicted z NN", xlab = "real z")
abline(0,1)
install.packages("neuralnet")
ggplot(aes(y = predict_testNN,x = test_data$z))
ggplot(aes(y = predict_testNN,x = test_data$z))+
geom_abline()+
geom_point()
#ggplot(aes(y = predict_testNN,x = test_data$z))+
#geom_abline()+
#geom_point()
rsme.nn = sqrt(mean((test_data$z - predict_testNN)^2))
rsme.nn
# Calculate Root Mean Square Error (RMSE)
RMSE.NN = (sum((test_data$z - predict_testNN)^2) / nrow(test_data)) ^ 0.5
RMSE.NN
head(predict_testNN)
head(dataset$z)
#create
mean(test_data$z==predict_testNN)
dataframe<-cbind(test_data$z,predict_testNN)
head(dataframe)
write.csv(dataframe,"submissionFile.csv",col.names = T)
read.csv("submisson.csv")
read.csv("submissonFile.csv")
write.csv(dataframe,"submissionFile.csv",col.names = T)
submissionFile<-write.csv(dataframe,"submissionFile.csv",col.names = T)
read.csv("submissonFile.csv")
head(ssubmissionFile)
head(submissionFile)
par(mfrow = c(1,2))
plot(test_data$z, predict_testNN, col='blue', pch=16, ylab = "predicted z NN", xlab = "real z")
abline(0,1,lwd = 2)
#par(mfrow = c(1,2))
plot(test_data$z, predict_testNN, col='blue', pch=16, ylab = "predicted z NN", xlab = "real z")
abline(0,1,lwd = 2)
#par(mfrow = c(1,2))
plot(test_data$z, predict_testNN, col='blue', pch=16, ylab = "predicted z NN", xlab = "real z")
abline(0,1,lwd = 2)
dataset = read.table("NN3D_data.csv", sep =",", header = TRUE)
m <- length(unique(dataset$x))
n <- length(unique(dataset$y))
nz <- matrix(dataset$z, nrow=m, ncol=n, byrow = FALSE)
persp(unique(dataset$x),unique(dataset$x),nz,theta=30, phi=30, expand=0.5,col="lightblue", zlab="z=f(x,y)", xlab = "x", ylab = "y", ticktype="detailed", shade=.75, lphi=45, ltheta=135)
m
nz
n
head(dataset)
dim(dataset)
str(dataset)
library(ggplot2)
library(GGally)
library(psych)
hist(
dataset$x,
main = "check X distribution",
xlab = "X",
col = "Blue"
)
hist(
dataset$y,
main = "check Y distribution",
xlab = "Y",
col = "Red"
)
#All is well
library(tidyverse)
colSums(is.na(dataset))
#check for outliers
boxplot(dataset$x)
boxplot(dataset$y)
boxplot(dataset$z)
anyDuplicated(dataset)
#there are no duplicates
# install package
install.packages("neuralnet")
#split train and test data
library(caret)
